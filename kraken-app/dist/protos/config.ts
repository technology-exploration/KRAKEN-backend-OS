/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 *  */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace config {
    export class RevokedCertificate extends pb_1.Message {
        constructor(data?: any[] | {
            certificate?: string;
            revoked?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("certificate" in data && data.certificate != undefined) {
                    this.certificate = data.certificate;
                }
                if ("revoked" in data && data.revoked != undefined) {
                    this.revoked = data.revoked;
                }
            }
        }
        get certificate() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set certificate(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get revoked() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set revoked(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            certificate?: string;
            revoked?: boolean;
        }) {
            const message = new RevokedCertificate({});
            if (data.certificate != null) {
                message.certificate = data.certificate;
            }
            if (data.revoked != null) {
                message.revoked = data.revoked;
            }
            return message;
        }
        toObject() {
            const data: {
                certificate?: string;
                revoked?: boolean;
            } = {};
            if (this.certificate != null) {
                data.certificate = this.certificate;
            }
            if (this.revoked != null) {
                data.revoked = this.revoked;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.certificate === "string" && this.certificate.length)
                writer.writeString(1, this.certificate);
            if (this.revoked !== undefined)
                writer.writeBool(2, this.revoked);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RevokedCertificate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevokedCertificate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.certificate = reader.readString();
                        break;
                    case 2:
                        message.revoked = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RevokedCertificate {
            return RevokedCertificate.deserialize(bytes);
        }
    }
    export class Empty extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new Empty({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }) {
            const message = new Message({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class Error extends pb_1.Message {
        constructor(data?: any[] | {
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get code() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: number;
            message?: string;
        }) {
            const message = new Error({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                message?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code !== undefined)
                writer.writeInt32(1, this.code);
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Error {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Error();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Error {
            return Error.deserialize(bytes);
        }
    }
    export class CRLUpdateResponse extends pb_1.Message {
        constructor(data?: any[] | {
            status?: string;
            message?: string;
            error?: Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get status() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getWrapperField(this, Error, 3) as Error;
        }
        set error(value: Error) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            status?: string;
            message?: string;
            error?: ReturnType<typeof Error.prototype.toObject>;
        }) {
            const message = new CRLUpdateResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.error != null) {
                message.error = Error.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
                message?: string;
                error?: ReturnType<typeof Error.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.status === "string" && this.status.length)
                writer.writeString(1, this.status);
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(2, this.message);
            if (this.error !== undefined)
                writer.writeMessage(3, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CRLUpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CRLUpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.error, () => message.error = Error.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CRLUpdateResponse {
            return CRLUpdateResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedOperationService {
        static definition = {
            updateCRL: {
                path: "/config.Operation/updateCRL",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RevokedCertificate) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RevokedCertificate.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CRLUpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CRLUpdateResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract updateCRL(call: grpc_1.ServerUnaryCall<RevokedCertificate, CRLUpdateResponse>, callback: grpc_1.sendUnaryData<CRLUpdateResponse>): void;
    }
    export class OperationClient extends grpc_1.makeGenericClientConstructor(UnimplementedOperationService.definition, "Operation", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options)
        }
        updateCRL: GrpcUnaryServiceInterface<RevokedCertificate, CRLUpdateResponse> = (message: RevokedCertificate, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CRLUpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CRLUpdateResponse>, callback?: grpc_1.requestCallback<CRLUpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.updateCRL(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedCommunicationService {
        static definition = {
            message: {
                path: "/config.Communication/message",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Message) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Message.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Message) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Message.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract message(call: grpc_1.ServerUnaryCall<Message, Message>, callback: grpc_1.sendUnaryData<Message>): void;
    }
    export class CommunicationClient extends grpc_1.makeGenericClientConstructor(UnimplementedCommunicationService.definition, "Communication", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options)
        }
        message: GrpcUnaryServiceInterface<Message, Message> = (message: Message, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Message>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Message>, callback?: grpc_1.requestCallback<Message>): grpc_1.ClientUnaryCall => {
            return super.message(message, metadata, options, callback);
        };
    }
}
